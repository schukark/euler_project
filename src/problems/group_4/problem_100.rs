/// # Solution outline
/// Let B = the number of blue discs
/// <br>
/// Let N = the total number of discs
///
/// P(BB) = B * (B - 1) / (N * (N - 1)) = 1 / 2
/// <br>
/// 2B^2 - 2B = N * (N - 1) = X
/// <br>
/// 2B^2 - 2B - X = 0 => B = (1 + sqrt(1 + 2X)) / 2
///
/// Which means that 1 + 2X is an odd square (it is automatically odd, because X is a whole number)
///
/// 1 + 2X = z^2 => 2N^2 - 2N + 1 = z^2 => N = (1 + sqrt(2z^2 - 1)) / 2
///
/// Which in turn means that 2z^2 - 1 is an odd square (being odd is automatically true)
///
/// So this task is brought down to this following:
/// <br>
/// ### Find integer solutions to t^2 - 2z^2 = -1, which is one of *Pell's equations*
///
/// It's fundamental solution is (1, 1) and all the other solutions are generated by finding odd powers of (1+ sqrt(2))
/// <br>
/// x_n + y_n * sqrt(2) = (1+ sqrt(2)) ^ (2n - 1)
///
/// Therefore: x_(n + 1) = 3x_n + 4y_n, y_(n + 1) = 2x_n + 3y_n
pub fn solve() -> i128 {
    const LIMIT: i128 = 10_i128.pow(12);

    let (mut x, mut y): (i128, i128) = (1, 1);

    loop {
        let n = (1 + x) / 2;

        if n < LIMIT {
            (x, y) = (3 * x + 4 * y, 2 * x + 3 * y);
            continue;
        }

        return find_blue(n);
    }
}

fn find_blue(n: i128) -> i128 {
    let x = n * (n - 1);

    (1 + (1 + 2 * x).checked_isqrt().unwrap()) / 2
}
